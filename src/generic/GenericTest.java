package src.generic;import java.util.ArrayList;import java.util.List;/** * @Description: 泛型 * @Date: 2020/4/13 14:36 * @Auther: zql */public class GenericTest {    public static void main(String[] args) {        /**         *  一，泛型只在编译阶段有效，运行期间会被擦除，运行期是确定的类型         */        List<String> strings = new ArrayList<>();        List<Integer> integers = new ArrayList<>();        Class<? extends List> stringsClass = strings.getClass();        Class<? extends List> integersClass = integers.getClass();        if (stringsClass.equals(integersClass))            System.out.println("泛型测试:运行期间类型相同");        /**         * 泛型的使用方式：泛型类，泛型接口，泛型方法         */        /**         * 二 ，泛型类         */        Generic<Integer> integerGeneric = new Generic<>(12);        /**         * 三，泛型接口：GenericInterface         * 在实现泛型接口的时候，如果未传入具体的实参类型，那么需要把泛型申明到类中         */        /**         * 四 ，泛型通配符         * 不同的泛型参数是不兼容的，可以使用通配符？来解决不兼容的问题.         * 此时？相当于Integer和Number类型的父类         * Generic<Number>  Generic<Integer>         */        Generic<Number> numberGeneric = new Generic<>(12);        showKey(integerGeneric);        /**         * 五，泛型方法         * 和泛型类的区别:泛型类是在实例化时指明具体类型的类。泛型方法是在调用时指明具体类型         * <T>是必不可少，这表明这是一个泛型方法,这个T可以出现再泛型的任意位置         */        Integer integer = integerGeneric.genericMethod(123);        System.out.println(integer);        /**         * 六 ，泛型的边界：实参只能传入某种类型的父类型或者子类型         *  public class Generic<T extends Number> implements GenericInterface<T>         *  public static void showKey(Generic<? extends Number> generic)         *  分别在类和方法上声明泛型参数只能是Number的子类         */    }    public static void showKey(Generic<? extends Number> generic){        System.out.println("泛型通配符测试，key的值是："+generic.getKey());    }}